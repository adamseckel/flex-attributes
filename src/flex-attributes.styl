@import 'flexbox'

// CONTAINERS
// This establishes the main-axis, thus defining the direction flex items are
// placed in the flex container. Flexbox is (aside from optional wrapping) a
// single-direction layout concept. Think of flex items as primarily laying out
// either in horizontal rows or vertical columns.

// By default, flex items will all try to fit onto one line. You can change that
// and allow the items to wrap as needed with this property. Direction also
// plays a role here, determining the direction new lines are stacked in.

// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/

// - FLEX COLUMN ---------------------------------------------------------------

[flex-column]
  flexbox(flex)
  flex-direction(column)

[flex-column="reverse"]
  flexbox(flex)
  flex-direction(column-reverse)

[flex-column="wrap"]
  flex-direction(column)
  flex-wrap(wrap)

[flex-column="nowrap"]
  flex-direction(column)
  flex-wrap(nowrap)

[flex-column="wrap-reverse"]
  flex-direction(column)
  flex-wrap(wrap-reverse)

[flex-column="reverse wrap"]
  flex-direction(column-reverse)
  flex-wrap(wrap)

[flex-column="reverse nowrap"]
  flex-direction(column-reverse)
  flex-wrap(nowrap)

[flex-column="reverse wrap-reverse"]
  flex-direction(column-reverse)
  flex-wrap(wrap-reverse)


// - FLEX ROW ------------------------------------------------------------------

[flex-row]
  flexbox(flex)
  flex-direction(row)

[flex-row="reverse"]
  flexbox(flex)
  flex-direction(row-reverse)

[flex-row="wrap"]
  flex-direction(row)
  flex-wrap(wrap)

[flex-row="nowrap"]
  flex-direction(row)
  flex-wrap(nowrap)

[flex-row="wrap-reverse"]
  flex-direction(row)
  flex-wrap(wrap-reverse)

[flex-row="reverse wrap"]
  flex-direction(row-reverse)
  flex-wrap(wrap)

[flex-row="reverse nowrap"]
  flex-direction(row-reverse)
  flex-wrap(nowrap)

[flex-row="reverse wrap-reverse"]
  flex-direction(row-reverse)
  flex-wrap(wrap-reverse)


// - LAYOUT --------------------------------------------------------------------
// ARGUMENT 1: This defines the alignment along the main axis. It helps distribute extra
// free space left over when either all the flex items on a line are inflexible,
// or are flexible but have reached their maximum size. It also exerts some
// control over the alignment of items when they overflow the line.

// ARGUMENT 2: This defines the default behaviour for how flex items are laid out along the
// cross axis on the current line. Think of it as the justify-content version
// for the cross-axis (perpendicular to the main-axis).

// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/

[flex-flow="center"]
  justify-content(center)
[flex-flow="start"]
  justify-content(start)
[flex-flow="end"]
  justify-content(end)
[flex-flow="space-between"]
  justify-content(space-between)
[flex-flow="space-around"]
  justify-content(space-around)

[flex-flow="center center"]
  justify-content(center)
  align-items(center)
[flex-flow="center start"]
  justify-content(center)
  align-items(start)
[flex-flow="center end"]
  justify-content(center)
  align-items(end)
[flex-flow="center stretch"]
  justify-content(center)
  align-items(stretch)
[flex-flow="center baseline"]
  justify-content(center)
  align-items(baseline)

[flex-flow="start center"]
  justify-content(start)
  align-items(center)
[flex-flow="start start"]
  justify-content(start)
  align-items(start)
[flex-flow="start end"]
  justify-content(start)
  align-items(end)
[flex-flow="start stretch"]
  justify-content(start)
  align-items(stretch)
[flex-flow="start baseline"]
  justify-content(flex-sstart)
  align-items(baseline)

[flex-flow="end center"]
  justify-content(end)
  align-items(center)
[flex-flow="end start"]
  justify-content(end)
  align-items(start)
[flex-flow="end end"]
  justify-content(end)
  align-items(end)
[flex-flow="end stretch"]
  justify-content(end)
  align-items(stretch)
[flex-flow="end baseline"]
  justify-content(end)
  align-items(baseline)

[flex-flow="space-between center"]
  justify-content(space-between)
  align-items(center)
[flex-flow="space-between start"]
  justify-content(space-between)
  align-items(start)
[flex-flow="space-between end"]
  justify-content(space-between)
  align-items(end)
[flex-flow="space-between stretch"]
  justify-content(space-between)
  align-items(stretch)
[flex-flow="space-between baseline"]
  justify-content(space-between)
  align-items(basline)

[flex-flow="space-around center"]
  justify-content(space-around)
  align-items(center)
[flex-flow="space-around start"]
  justify-content(space-around)
  align-items(start)
[flex-flow="space-around end"]
  justify-content(space-around)
  align-items(end)
[flex-flow="space-around stretch"]
  justify-content(space-around)
  align-items(stretch)
[flex-flow="space-around baseline"]
  justify-content(space-around)
  align-items(basline)

// - CONTENT -------------------------------------------------------------------
// This aligns a flex container's lines within when there is extra space in the
// cross-axis, similar to how justify-content aligns individual items within
// the main-axis.

// Note: this property has no effect when there is only one line of flex items.

// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/
for $prop in center start end stretch space-between space-around
  [flex-content=\"{$prop}\"]
    align-content($prop)

// ITEMS

// - GROW ----------------------------------------------------------------------
// This defines the ability for a flex item to grow if necessary. It accepts a
// unitless value that serves as a proportion. It dictates what amount of the
// available space inside the flex container the item should take up.

// If all items have flex-grow set to 1, the remaining space in the container
// will be distributed equally to all children. If one of the children a value
// of 2, the remaining space would take up twice as much space as the others
// (or it will try to, at least).

// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/

for $num in range(0,10)
  [flex-grow=\"{$num}\"]
    flex-grow($num)

// - SHRINK --------------------------------------------------------------------
// This defines the ability for a flex item to shrink if necessary.
// Negative numbers are invalid.

// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/

for $num in range(0,10)
  [flex-shrink=\"{$num}\"]
    flex-shrink($num)
